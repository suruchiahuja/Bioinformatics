x = ((theta/2)*exp(-theta*abs(x)))/((1/(2*pi)^0.5)*exp((-x^2)/2))
return(x)}
a = (sqrt(2)/pi)*exp(.5)
xc = rlaplace(1000,0,1)
uc=runif(1000,0,1)
tc = a*sapply(xc, goverf)
ut = uc*tc
X11()
hist(xc[ut <=1], prob=T)
a = (sqrt(2)/pi)*exp(.5)
xc = rlaplace(1000,0,1)
uc=runif(1000,0,1)
tc = a*sapply(xc, func1)
ut = uc*tc
X11()
hist(xc[ut <=1], prob=T)
p<-ut <=1
p1<-rnorm(x)
x=seq(-10,10,length=1000)
lines(x,dnorm(x))
sum(ut<=1)/1000
x=seq(-10,10,length=1000)
lines(x,dnorm(x))
sum(ut<=1)/1000
X11()
hist(xc[ut <=1], prob=T)
p<-ut <=1
p1<-rnorm(x)
x=seq(-10,10,length=1000)
lines(x,dnorm(x))
sum(ut<=1)/1000
X11()
hist(xc[ut <=1], prob=T)
p<-ut <=1
p1<-rnorm(x)
x=seq(-10,10,length=1000)
lines(x,dnorm(x))
sum(ut<=1)/1000
chisq.test(p,rnorm(x))
library(base)
#Initializing given data
data = c(rep(0,7840),rep(1,1317),rep(2,239),rep(3,42),rep(4,14),rep(5,4),rep(6,4),7)
beta=3.2;
m=mean(data);
alpha.mom=m*beta;
alpha.mom
data = c(rep(0,7840),rep(1,1317),rep(2,239),rep(3,42),rep(4,14),rep(5,4),rep(6,4),7)
beta=3.2;
logfn1 <- function (alpha){
ba <- beta ^alpha
dr <- (beta+1)^(alpha+data)
return(-sum(log((ba)*gamma(alpha+data)/(factorial(data)*gamma(alpha)*dr))))
}
a <-c()
y <- c()
for(i in 1:100){
a[i] <- 1/i
y[i] <- logfn1(a[i])
}
z=-y
x11()
plot(a,z, xlab="x", ylab="l(x)",'l');
data = c(rep(0,7840),rep(1,1317),rep(2,239),rep(3,42),rep(4,14),rep(5,4),rep(6,4),7)
beta=3.2;
logfn1 <- function (alpha){
ba <- beta ^alpha
dr <- (beta+1)^(alpha+data)
return(-sum(log((ba)*gamma(alpha+data)/(factorial(data)*gamma(alpha)*dr))))
}
a <-c()
y <- c()
for(i in 1:100){
a[i] <- 1/i
y[i] <- logfn1(a[i])
}
z=-y
x11()
plot(a,z, xlab="x", ylab="l(x)",'l');
#finding the maximum of the function
mle_alpha <- nlminb(0.5,logfn1)$par
mle_alpha
fn <- function(alpha,data){
ba <- beta ^alpha
dr <- (beta+1)^(alpha+data)
return(-sum(log(ba*gamma(alpha+data)/(factorial(data)*gamma(alpha)*dr))))
}
#finding confidence intervals
n=length(data);
B=100
mle_alpha_boot=c()
for(i in 1:B){
boot_obs=sample(1:n,n,replace=T)
y_boot = data[boot_obs]
for (j in 1:10)
{
a[j]=1/j
y[j]=fn(a[j],y_boot)
}
mle_alpha_boot[i]=nlminb(0.5,fn,data=y_boot)[[1]];
}
se = sqrt(var(mle_alpha_boot))
#Calculating the Normal confidence interval
Normal = c(mle_alpha_boot-2*se, mle_alpha_boot+2*se)
Normal
n=length(data);
prob <- data[data[]==2]
#calculating the observed probability of more than 2 claims
prob <- length(prob)/n;
prob.boot=c();
pb=c();
for(i in 1:100){
x <- sample(1:n,n,replace=T)
x.bootstrap <- data[x]
pb <- x.bootstrap[x.bootstrap[]>2]
prob.boot[i] <- length(prob.boot)/n;
}
serror = sqrt(var(prob.boot))
serror
Normal = c(prob-2*serror, prob+2*serror)
Normal
N1=c(rep(3,100))
N2=c(rep(3,100))
for(k in 1:100)
{
#let N1[k] be the random variable that counts the number of trials needed to get a HTT at kth trial
y=round(runif(N1[k],0,1))#simulation for a coin toss
while((y[N1[k]-2]!=1)||(y[N1[k]-1]!=0)||(y[N1[k]]!=0))
#The condition in the while loop is to make sure we get a 1 0 0 pattern (an analog to HTT pattern)
{
#Simulating a new coin toss each till the desired pattern is achieved
N1[k]=N1[k]+1;
y[N1[k]]=round(runif(1,0,1))
}
#let N2[k] be the random variable that counts the number of trials needed to get a HTH at kth trial
y=round(runif(N2[k],0,1))#simulation for a coin toss
while((y[N2[k]-2]!=1)||(y[N2[k]-1]!=0)||(y[N2[k]]!=1))
#The condition in the while loop is to make sure we get a 1 0 1 pattern
{
#Simulating a new coin toss each till the desired pattern is achieved
N2[k]=N2[k]+1;
y[N2[k]]=round(runif(1,0,1))
}
}
#Gives mean number of tosses required to observe each pattern
m1=mean(N1)
m2=mean(N2)
bp=barplot(c(m1,m2), names.arg=c("HTT","HTH"),ylab="Average number of tosses")
text(bp,0,c(m1,m2),cex=1,pos=3)
x11()
bp=barplot(c(m1,m2), names.arg=c("HTT","HTH"),ylab="Average number of tosses")
text(bp,0,c(m1,m2),cex=1,pos=3)
x=round(runif(100000,0,1));
a=0;
b=0;
for(i in 3:100000)
{
if((x[i-2]==1)&(x[i-1]==0)&(x[i]==0))
a=a+1
if((x[i-2]==1)&(x[i-1]==0)&(x[i]==1))
b=b+1
}
pdf("hw.pdf")
#saves a barplot in the .pdf file
bp1=barplot(c(a,b), names.arg=c("HTT","HTH"),ylab="Number of occurrences")
text(bp1,0,c(a,b),cex=1,pos=3)
library(base)
#Initializing given data
data = c(rep(0,7840),rep(1,1317),rep(2,239),rep(3,42),rep(4,14),rep(5,4),rep(6,4),7)
beta=3.2;
m=mean(data);
alpha.mom=m*beta;
alpha.mom
data = c(rep(0,7840),rep(1,1317),rep(2,239),rep(3,42),rep(4,14),rep(5,4),rep(6,4),7)
beta=3.2;
logfn1 <- function (alpha){
ba <- beta ^alpha
dr <- (beta+1)^(alpha+data)
return(-sum(log((ba)*gamma(alpha+data)/(factorial(data)*gamma(alpha)*dr))))
}
a <-c()
y <- c()
for(i in 1:100){
a[i] <- 1/i
y[i] <- logfn1(a[i])
}
z=-y
x11()
plot(a,z, xlab="x", ylab="l(x)",'l');
#finding the maximum of the function
mle_alpha <- nlminb(0.5,logfn1)$par
mle_alpha
fn <- function(alpha,data){
ba <- beta ^alpha
dr <- (beta+1)^(alpha+data)
return(-sum(log(ba*gamma(alpha+data)/(factorial(data)*gamma(alpha)*dr))))
}
x<-runif(20,1,5)
B=100
i=1
for(i in 1:B)
{
boot=sample(seq(1:10),10,replace=T)
boot.obs=x[boot]
a_mle<-min(boot.obs[])
tau_mle<-(5+a_mle)/2
tau<-(5+1)/2
tau_mom<-(5+2(min(boot.obs)-5))/2
}
x<-runif(20,1,5)
B=100
i=1
for(i in 1:B)
boot=sample(seq(1:10),10,replace=T)
for(i in 1:B)
{
boot=sample(seq(1:10),10,replace=T)
boot.obs=x[boot]
a_mle<-min(boot.obs[])
tau_mle<-(5+a_mle)/2
tau<-(5+1)/2
tau_mom<-(5+2(min(boot.obs)-5))/2
}
?min
library("base")
x<-runif(20,1,5)
B=100
i=1
for(i in 1:B)
{
boot=sample(seq(1:10),10,replace=T)
boot.obs=x[boot]
a_mle<-min(boot.obs[])
tau_mle<-(5+a_mle)/2
tau<-(5+1)/2
tau_mom<-(5+2(min(boot.obs)-5))/2
}
source('http://bioconductor.org/biocLite.R')
biocLite('impute')
rm(list=ls())
source('http://bioconductor.org/biocLite.R')
rm(list=ls())
source('http://bioconductor.org/biocLite.R')
biocLite('impute')
rm(list=ls())
source('http://bioconductor.org/biocLite.R')
biocLite('impute')
rm(list=ls())
source('http://bioconductor.org/biocLite.R')
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLite('AnnotationForge') # this was not in the original list - I added it to address load error in IlluminaHumanMethylation27k.db
biocLite(c('Cairo','arrayQualityMetrics'),type='source')
biocLite('impute')
biocLite('IlluminaHumanMethylation27k.db',type='source')
biocLite(c('Biobase','GEOquery'),type='source')
biocLite(c('GEOmetadb','DNAcopy','limma','Rgraphviz','SRAdb','xtable','methylumi'),type='source')
install.packages('TCGAGBM',contriburl=contrib.url('http://watson.nci.nih.gov/~sdavis/software/R',type='source'),type='source')
library(TCGAGBM)
clinical = read.delim(system.file("extdata/Clinical/clinical_patient_public_GBM.txt.gz",package="TCGAGBM"),header=TRUE)
rownames(clinical) = clinical[,1]
summary(clinical)
data(expTCGA)
library(arrayQualityMetrics, quietly = TRUE)
data.matrix <- exprs(expTCGA)
sum(is.na(data.matrix))
library(impute, quietly = TRUE)
library(limma, quietly = TRUE)
data.matrix <- impute.knn(data.matrix)$data
norm.matrix=normalizeBetweenArrays(data.matrix)
library(matrixStats)
featureVars=rowVars(data.matrix)
library(gplots)
install.packages("gplots", dependencies = TRUE)
rm(list=ls())
if(F){ # execute the following code to install the requisite libraries.
source('http://bioconductor.org/biocLite.R')
biocLite(c('IlluminaHumanMethylation27k.db','Biobase','GEOquery',
'GEOmetadb','DNAcopy','limma','Rgraphviz','SRAdb','xtable','methylumi'))
biocLite('TCGAGBM',siteRepos='http://watson.nci.nih.gov/~sdavis/software/R',type='source')
}
library(TCGAGBM)
clinical = read.delim(system.file("extdata/Clinical/clinical_patient_public_GBM.txt.gz",package="TCGAGBM"),header=TRUE)
rownames(clinical) = clinical[,1]
summary(clinical)
#library(TCGAGBM)
library(TCGAGBM)
data(methTCGA)
rm(list=ls())
library(knitr)
library(GEOquery)
load(file="gse19439.RData")
gse19439=getGEO("GSE19439",GSEMatrix=T)
gse19439=gse19439[[1]]
save(file="gse19439.RData",gse19439)
load(file="gse19439.RData")
<<runscan>>=
tmp=as.character(pData(phenoData(gse19439))[,1])
J=length(tmp) # J=number of samples
TBgroup=rep("",J)
for(j in 1:J) TBgroup[j]=substring(tmp[j],1,3)
#
FTB=factor(TBgroup,levels=c("CON","LTB","PTB"))
X=exprs(gse19439)
myKrusk=function(i){
cat(i,"...",fill=F)
kruskal.test(x=X[i,],g=FTB)$p.value
}
load("myPvals.RData")
myPvals=mapply(myKrusk,1:(dim(X)[1])) ;save(file="myPvals.RData",myPvals)
rm(list=ls())
library(knitr)
library(GEOquery)
if(F){
install.packages("graphics")
install.packages("knitr")
install.packages("GEOquery")
install.packages("gplot")
install.packages("vioplot")
install.packages("beanplot")
}
library(knitr)
library(GEOquery)
gse19439 = getGEO("GSE19439", GSEMatrix = T)
gse19439 = gse19439[[1]]
save(file = "gse19439.RData", gse19439)
load(file = "gse19439.RData")
tmp=as.character(pData(phenoData(gse19439))[,1]) # pData=phenoData
J=length(tmp) # J=number of samples (42)
TBgroup=rep("",J) # create a null vector
for(j in 1:J) TBgroup[j]=substring(tmp[j],1,3) # get the first 3 letters from each tmp
TBgroup # class character
FTB=factor(TBgroup,levels=c("CON","LTB","PTB")) # withdraw "", only keep the letters # class factor
X=exprs(gse19439)
dim(X) # 48791 features and 42 samples
myKrusk=function(i){
cat(i,"...",fill=F)
kruskal.test(x=X[i,],g=FTB)$p.value
}
myPvals=mapply(myKrusk,1:(dim(X)[1]))
load("myPvals.RData")
myPvals=mapply(myKrusk,1:(dim(X)[1]))
save(file="myPvals.RData",myPvals)
load("myPvals.RData")
GroupLabels=c("Group I","Group II","Group III","Group IV")
best4=order(myPvals)[1:4]
print(best4)
for(i in 1:length(GroupLabels))
cat("Group Label:",GroupLabels[i],
"\t\t row assignment:",best4[i],fill=T)
X[10685,]
group2 = X[10685,]
group2 # 42 samples' expression data of a specific feature
class(group2) # numeric
length(group2) # 42
FTB
group2 = X[10685,]
df2 = data.frame(group2, FTB) # create a dataframe including our expression data and factors
df2
boxplot(df2$group2 ~ df2$FTB, ylab = 'expression data')
library(vioplot)
library(vioplot)
install.packages("vioplot")
install.packages("beanplot")
library(vioplot)
library(beanplot)
x1=df2[df2$FTB=="CON",1]
x2=df2[df2$FTB=="LTB",1]
x3=df2[df2$FTB=="PTB",1]
vioplot(x1, x2, x3,names=c("CON", "LTB", "PTB"))
beanplot(x1, x2, x3,names=c("CON", "LTB", "PTB"))
library(gplots)
best20=order(myPvals)[1:20]
data20=X[best20,]
heatmap.2(data20,trace="none",main="Best20 Data Matrix")
load("C:/Users/Suruchi Ahuja/Desktop/R prog/New folder/546 hw1/bodyfat.RData")
rm(list=ls())
library(affy)
library(affyPLM)
# this provides an AffyBatch object
load("PSpikeAffyBatch.RData")
load("question4.RData")
rm(list=ls())
library(affy)
library(affyPLM)
load("PSpikeAffyBatch.RData")
load("PSpikeAffyBatch.RData")
rm(list=ls())
setwd("C:/Users/Suruchi Ahuja/Desktop/R prog/New folder/525 hw1")
library(affy)
library(affyPLM)
load("PSpikeAffyBatch.RData")
load("question4.RData")
spikeDF <- read.table(file="AffyProbeSpikeValues.csv",sep="\t")
levels(spikeDF[,2])
summary(spikeDF[,2])
load("C:/Users/Suruchi Ahuja/Desktop/R prog/New folder/525 hw1/myPvals.RData")
load("C:/Users/Suruchi Ahuja/Desktop/R prog/New folder/525 hw1/PSpikeAffyBatch.RData")
getwd()
library(knitr)
library(GEOquery)
gse19439 <- getGEO("GSE19439",GSEMatrix=T)
gse19439 <- gse19439[[1]]
save(file="gse19439.RData",gse19439)
load(file="gse19439.RData")
gse19439
experimentData(gse19439)
feat <- featureData(gse19439)
varLabels(feat)
pData(phenoData(gse19439))[,1]
head(pData(phenoData(gse19439)))
tmp <- as.character(pData(phenoData(gse19439))[,1])
J <- length(tmp) # J=number of samples
TBgroup <- rep("",J)
for(j in 1:J) TBgroup[j]=substring(tmp[j],1,3)
FTB <- factor(TBgroup,levels=c("CON","LTB","PTB"))
X <- exprs(gse19439)
myKrusk <- function(i){
cat(i,"...",fill=F)
kruskal.test(x=X[i,], g=FTB)$p.value
}
myPvals <- mapply(myKrusk,1:(dim(X)[1]))
save(file="myPvals.RData",myPvals)
load("myPvals.RData")
GroupLabels <- c("Group I","Group II","Group III","Group IV")
best4 <- order(myPvals)[1:4]
print(best4)
for(i in 1:length(GroupLabels)){
cat("Group Label:", GroupLabels[i], "\t\t row assignment:", best4[i], fill=T)
}
myrow <- gse19439[10685,]
dim(myrow)
featureNames(myrow)
gene.info <- pData(featureData(myrow))
gene.info
library(xtable)
LACTB (Lactamase, Beta)
sampleNames(myrow)
boxplot(log2(X[10685,sampleNames(myrow)[FTB == 'CON']]),
log2(X[10685,sampleNames(myrow)[FTB == 'LTB']]),
log2(X[10685,sampleNames(myrow)[FTB == 'PTB']]),
main = "Boxplot of Row Data as Function of TB Phenotype",
names = c("CON", "LTB", "PTB"))
library(vioplot)
vioplot(log2(X[10685,sampleNames(myrow)[FTB == 'CON']]),
log2(X[10685,sampleNames(myrow)[FTB == 'LTB']]),
log2(X[10685,sampleNames(myrow)[FTB == 'PTB']]),
names = c("CON", "LTB", "PTB"))
title("Violin Plot of Row Data as Function of TB Phenotype")
library(beanplot)
beanplot(log2(X[10685,sampleNames(myrow)[FTB == 'CON']]),
log2(X[10685,sampleNames(myrow)[FTB == 'LTB']]),
log2(X[10685,sampleNames(myrow)[FTB == 'PTB']]),
names = c("CON", "LTB", "PTB"))
title("Bean Plot of Row Data as Function of TB Phenotype")
library(gplots)
best20 <- order(myPvals)[1:20]
x.best <- X[best20,]
heatmap.2(X[best20,], main="20 student features", scale = "row", trace="none")
heatmap.2(X[best20,], main="20 student features", scale = "row", trace="none", labCol = FTB) #change sample names into group name
library(gplots)
best20 =order(myPvals)[1:20]
heatmap = heatmap.2(X[best20,])
library(NMF)
Info = pData(phenoData(gse19439))[,1:2]
Info[,1] <- FTB
group = Info[1]
heatmap2 = aheatmap(X[best20,], annCol=group, border=True)
library(gplots)
best20 <- order(myPvals)[1:20]
x.best <- X[best20,]
heatmap.2(X[best20,], main="20 student features", scale = "row", trace="none")
heatmap.2(X[best20,], main="20 student features", scale = "row", trace="none", labCol = FTB) #change sample names into group name
library(affy)
library(affyPLM)
load("PSpikeAffyBatch.RData")
load("question4.RData")
spikeDF <- read.table(file="AffyProbeSpikeValues.csv",sep="\t")
levels(spikeDF[,2])
levels(spikeDF[,2])
summary(spikeDF[,2])
spikeDF = read.table(file = "AffyProbeSpikeValues.csv", sep = "\t")
rm(list=ls())
library(affy)
library(affyPLM)
setwd("C:/Users/Suruchi Ahuja/Desktop/R prog/New folder/525 hw1/PSpikeData")
load("PSpikeAffyBatch.RData")
spikeDF <- read.table(file="AffyProbeSpikeValues.csv",sep="\t")
spikeDF <- read.table(file.choose(),sep="\t")
levels(spikeDF[,2])
summary(spikeDF[,2])
SpikeFC <- as.numeric(levels(spikeDF[,2])[spikeDF[,2]])
names(SpikeFC) <- spikeDF$V1
nonZeroDX <- which(!is.na(SpikeFC) & (SpikeFC != 0))
spikeFC.clean <- SpikeFC[nonZeroDX]
length(spikeFC.clean)
bgcorrect.mtd <- c("rma", "mas", "rma", "mas", "rma", "none", "mas", "mas")
normalized.mtd <- c("constant", "quantiles", "quantiles", "loess", "loess", "constant", "qspline", "qspline")
pmcorrect.mtd <- c("pmonly", "pmonly", "subtractmm", "mas", "mas", "pmonly", "subtractmm", "mas")
summary.mtd <- c("mas", "mas", "avgdiff", "medianpolish", "medianpolish", "avgdiff", "mas", "mas")
route.expsets <- list()
for (i in 1:length(bgcorrect.mtd)){
routes <- expresso(affydata,
bgcorrect.method = bgcorrect.mtd[i],
normalize.method = normalized.mtd[i],
pmcorrect.method = pmcorrect.mtd[i],
summary.method = summary.mtd[i])
route.expsets[[i]] <- exprs(routes)[nonZeroDX,]
}
length(route.expsets)
labels <- factor(c(rep(0, 9), rep(1, 9))) #0 is control, 1 is experimental
source("http://bioconductor.org/biocLite.R")
biocLite("multtest")
